CMAKE_MINIMUM_REQUIRED(VERSION 2.6)


PROJECT(Ascendancy)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
		MESSAGE(STATUS "Clang system/compiler detected")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")

elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
		MESSAGE(STATUS "G++ system/compiler detected")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")

		SET(THIRD_PARTY_LIBS ${THIRD_PARTY_LIBS}
		)
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
		MESSAGE(STATUS "Intel system/compiler detected")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL ${MSVC})

	ADD_DEFINITIONS(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_DEPRECATE)

	SET(THIRD_PARTY_LIBS ${THIRD_PARTY_LIBS}
	  winmm
	  gdi32
	)
endif()



# Currently always making static LOCAL_LIBS
set(LIBRARY_EXTENSION "${LIBRARY_EXTENSION}-s")

# Determine what type of library (Debug/Release) to build
if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_BUILD_TYPE Debug)
    set(LIBRARY_EXTENSION "${LIBRARY_EXTENSION}-d")

else(NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_BUILD_TYPE Release)

endif()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include/)
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/thirdparty/)


INCLUDE(${CMAKE_SOURCE_DIR}/ProjectFiles.cmake)


SET(LOCAL_LIBS ${LOCAL_LIBS}
)

SET(ALL_LIBS ${ALL_LIBS}
	${LOCAL_LIBS}
	${THIRD_PARTY_LIBS}
)

GET_DIRECTORY_PROPERTY( DirDefs DIRECTORY ${CMAKE_SOURCE_DIR} COMPILE_DEFINITIONS )
FOREACH( d ${DirDefs} )
    MESSAGE( STATUS "Definition: " ${d} )
ENDFOREACH()
FOREACH( l ${THIRD_PARTY_LIBS} )
    MESSAGE( STATUS "Third Party Library: " ${l} )
ENDFOREACH()
FOREACH( l ${LOCAL_LIBS} )
    MESSAGE( STATUS "Local Library: " ${l} )
ENDFOREACH()


ADD_EXECUTABLE(Ascendancy Ascendancy.cpp)
TARGET_LINK_LIBRARIES(Ascendancy LINK_PUBLIC ${ALL_LIBS})

ADD_EXECUTABLE(Test test/Test.cpp ${TEST_SOURCE_FILES})
TARGET_LINK_LIBRARIES(Test LINK_PUBLIC ${ALL_LIBS})